const fs = require('fs');\n\n// Task 1: Read a file asynchronously\nfunction readFile(callback) {\n  console.log('Reading the file...');\n  fs.readFile('file.txt', 'utf8', (err, data) => {\n    if (err) {\n      console.log('Error reading file:', err);\n      callback(err); // Call the callback with the error\n    } else {\n      console.log('File content:', data);\n      callback(null, data); // Successfully read the file, pass the data to the callback\n    }\n  });\n}\n\n// Task 2: Wait for 2 seconds (simulated delay)\nfunction waitFor(callback) {\n  console.log('Waiting for 2 seconds...');\n  setTimeout(() => {\n    console.log('Done waiting!');\n    callback();\n  }, 2000); // Wait for 2 seconds\n}\n\n// Task 3: Write a log asynchronously\nfunction writeLog(message, callback) {\n  console.log('Writing log...');\n  fs.appendFile('log.txt', message + '\\n', (err) => {\n    if (err) {\n      console.log('Error writing log:', err);\n      callback(err); // Call callback with error\n    } else {\n      console.log('Log written successfully!');\n      callback(null); // Successfully written, call the callback\n    }\n  });\n}\n\n// Task Chain (callback hell or pyramid of doom)\nreadFile((err, data) => {\n  if (err) {\n    console.log('Aborting due to error.');\n    return;\n  }\n\n  waitFor(() => {\n    const logMessage = File content processed: ;\n    writeLog(logMessage, (err) => {\n      if (err) {\n        console.log('Aborting due to error.');\n        return;\n      }\n      console.log('All tasks completed!');\n    });\n  });\n});
